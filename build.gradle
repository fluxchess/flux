apply plugin: 'maven'
apply plugin: 'cobertura'
apply plugin: 'coveralls'

description = 'Flux Chess Engine'

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'pmd'
  apply plugin: 'findbugs'
  apply plugin: 'checkstyle'

  group = 'com.fluxchess'
  version = '3.0.0-alpha'
  ext.releaseBranch = 'master'

  if (!project.hasProperty('buildNumber') || !(project.hasProperty('branchName') && branchName == releaseBranch)) {
    // We're probably building on a dev machine or we're building a branch
    ext.buildNumber = 'dev'
  }
  if (!project.hasProperty('revisionNumber')) {
    // We're probably building on a dev machine
    ext.revisionNumber = 'dev'
  }

  if (!version.contains('-') && !(project.hasProperty('releaseVersion') && releaseVersion == version)) {
    // Append '-rc' if we're not releasing yet
    version += '-rc'
  }

  if (version.contains('-')) {
    // Append the buildNumber if we're not releasing
    version += '.' + buildNumber
  }

  if (version.contains('-') && !(project.hasProperty('branchName') && branchName == releaseBranch)) {
    // Append the revisionNumber if we're not releasing and not on a release branch
    version += '+' + revisionNumber
  }

  afterEvaluate { println "Building ${name} version ${version}" }

  if (!project.hasProperty('s3AccessKeyId_password')) {
    ext.s3AccessKeyId_password = 'n/a'
  }

  if (!project.hasProperty('s3SecretAccessKey_password')) {
    ext.s3SecretAccessKey_password = 'n/a'
  }

  repositories {
    mavenCentral()
    maven { url "http://maven.fluxchess.com/release" }
    maven { url "http://maven.fluxchess.com/staging" }
  }

  tasks.withType(Pmd) {
    pmd {
      ignoreFailures = true
    }
  }

  tasks.withType(FindBugs) {
    findbugs {
      ignoreFailures = true
    }
  }

  tasks.withType(Checkstyle) {
    checkstyle {
      configFile = new File("${rootDir}/config/checkstyle/checkstyle.xml")
      ignoreFailures = true
      showViolations = false
    }
  }

  dependencies {
    testCompile 'junit:junit:4.+'
  }

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
      version: project.version,
      buildNumber: project.buildNumber,
      revisionNumber: project.revisionNumber
    ])
  }
}

project(':flux-integration') {
  description = 'Integration Testing'

  sourceSets {
    integration
  }

  configurations {
    integrationCompile.extendsFrom compile
    integrationRuntime.extendsFrom runtime
  }

  dependencies {
    compile project(':')
    compile 'junit:junit:4.+'
  }

  task integration(type: Test) {
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
  }
}

project(':flux-x88') {
  description = '0x88 Move Generator'

  dependencies {
    compile 'com.fluxchess:jcpi:+'

    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'org.slf4j:slf4j-log4j12:1.7.+'
    compile 'log4j:log4j:1.2.+'
  }
}

project(':flux-bitboard') {
  description = 'Bitboard Move Generator'

  dependencies {
    compile 'com.fluxchess:jcpi:+'

    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'org.slf4j:slf4j-log4j12:1.7.+'
    compile 'log4j:log4j:1.2.+'
  }
}

cobertura.coverageFormats = ['html', 'xml']

sourceSets {
  testing
}

dependencies {
  compile 'com.fluxchess:jcpi:+'

  testCompile 'org.slf4j:slf4j-api:1.7.+'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.+'
  testCompile 'log4j:log4j:1.2.+'

  testingCompile project(':')
}

jar {
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version, 'Main-Class': 'com.fluxchess.flux.Flux'
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task dist(type: Zip) {
  def baseDir = "${project.name}-${project.version}"

  into("$baseDir") {
    from('README.md') {
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
    from 'COPYING'
    from 'COPYING.LESSER'

    from jar
    from sourcesJar
    from javadocJar

    from('src/dist/Flux.cmd') {
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
    from('src/dist/Flux') {
      fileMode = 0755
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

uploadArchives {
  if (project.hasProperty('branchName')) {
    if (branchName == releaseBranch) {
      if (version.contains('-')) {
        ext.repositoryName = 'staging'
      } else {
        ext.repositoryName = 'release'
      }

      configurations {
        deployerJars
      }

      dependencies {
        deployerJars 'org.springframework.build:aws-maven:4.+'
      }

      repositories {
        mavenDeployer {
          configuration = configurations.deployerJars
          repository(url: "s3://maven.fluxchess.com/${repositoryName}") {
            authentication(userName: s3AccessKeyId_password, passphrase: s3SecretAccessKey_password)
          }
        }
      }
    } else {
      doLast { println "Skipping upload. Not on ${releaseBranch} branch (${branchName})." }
    }
  } else {
    doLast { println "Skipping upload. No branch name defined." }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.8'
}
