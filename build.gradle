apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

description = 'Flux Chess Engine'

group = 'com.fluxchess'
version = '2.2.2'
ext.releaseBranch = '2.2.x'

if (!hasProperty('buildNumber') || !(hasProperty('branchName') && branchName == releaseBranch)) {
  // We're probably building on a dev machine or we're building a branch
  ext.buildNumber = 'dev'
}
if (!hasProperty('revisionNumber')) {
  // We're probably building on a dev machine
  ext.revisionNumber = 'dev'
}

if (!version.contains('-') && !(hasProperty('releaseVersion') && releaseVersion == version)) {
  // Append '-rc' if we're not releasing yet
  version += '-rc'
}

if (version.contains('-')) {
  // Append the buildNumber if we're not releasing
  version += '.' + buildNumber
}

if (version.contains('-') && !(hasProperty('branchName') && branchName == releaseBranch)) {
  // Append the revisionNumber if we're not releasing and not on a release branch
  version += '+' + revisionNumber
}

println "Building version ${version}"

if (!hasProperty('s3AccessKeyId')) {
  ext.s3AccessKeyId = 'n/a'
}

if (!hasProperty('s3SecretAccessKey')) {
  ext.s3SecretAccessKey = 'n/a'
}

repositories {
  mavenCentral()
  maven {
    url "http://maven.fluxchess.com/release"
  }
}

tasks.withType(Pmd) {
  pmd {
    ignoreFailures = true
  }
}

tasks.withType(FindBugs) {
  findbugs {
    ignoreFailures = true
  }
}

tasks.withType(Checkstyle) {
  checkstyle {
    ignoreFailures = true
    showViolations = false
  }
}

dependencies {
  compile 'com.fluxchess:jcpi:1.1.+'

  testCompile 'junit:junit:4.+'
  testCompile 'org.slf4j:slf4j-api:1.7.+'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.+'
  testCompile 'log4j:log4j:1.2.+'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

processResources {
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
    version: project.version,
    buildNumber: project.buildNumber,
    revisionNumber: project.revisionNumber
  ])
}

jar {
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version, 'Main-Class': 'com.fluxchess.flux.Flux'
  }
}

task testsJar(type: Jar, dependsOn: testClasses) {
  classifier = 'tests'
  from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task dist(type: Zip) {
  def baseDir = "${project.name}-${project.version}"

  into("$baseDir") {
    from 'README.md'
    from 'COPYING'
    from 'COPYING.LESSER'

    from jar
    from testsJar
    from sourcesJar
    from javadocJar

    from 'src/dist/Flux.ini'
    from 'src/dist/polyglot.ini-Windows'
    from 'src/dist/polyglot.ini-Linux'

    from('src/dist/Flux.cmd') {
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
    from('src/dist/Flux') {
      fileMode = 0755
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
  }
}

artifacts {
  archives testsJar
  archives sourcesJar
  archives javadocJar
}

uploadArchives {
  if (project.hasProperty('branchName')) {
    if (branchName == releaseBranch) {
      configurations {
        deployerJars
      }

      dependencies {
        deployerJars 'org.springframework.build:aws-maven:4.+'
      }

      repositories {
        mavenDeployer {
          configuration = configurations.deployerJars
          repository(url: 's3://maven.fluxchess.com/release') {
            authentication(userName: s3AccessKeyId, passphrase: s3SecretAccessKey)
          }
        }
      }
    } else {
      println "Skipping upload. Not on ${releaseBranch} branch (${branchName})."
    }
  } else {
    println "Skipping upload. No branch name defined."
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.8'
}
